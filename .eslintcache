[{"F:\\DEV\\cse470\\transactionApp\\src\\index.js":"1","F:\\DEV\\cse470\\transactionApp\\src\\App.js":"2","F:\\DEV\\cse470\\transactionApp\\src\\reportWebVitals.js":"3","F:\\DEV\\cse470\\transactionApp\\src\\utils\\Common.js":"4","F:\\DEV\\cse470\\transactionApp\\src\\routers\\AppRouter.js":"5","F:\\DEV\\cse470\\transactionApp\\src\\store\\store.js":"6","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Controller\\Auth.js":"7","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Controller\\profileActions.js":"8","F:\\DEV\\cse470\\transactionApp\\src\\routers\\PrivateRoute.js":"9","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\View\\Account.js":"10","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\View\\Login.js":"11","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\View\\Profile.js":"12","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\View\\Navbar.js":"13","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\View\\Register.js":"14","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Model\\authReducer.js":"15","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Model\\profileReducer.js":"16","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Model\\alertReducer.js":"17","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Model\\transactionReducer.js":"18","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Model\\accountReducer.js":"19","F:\\DEV\\cse470\\transactionApp\\src\\utils\\Constants.js":"20","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Controller\\Alert.js":"21","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\View\\AccountForm.js":"22","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\View\\Summary.js":"23","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\View\\AddAccountForm.js":"24","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Controller\\accountAction.js":"25","F:\\DEV\\cse470\\transactionApp\\src\\utils\\mask.js":"26","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Controller\\transactionAction.js":"27","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\View\\DataTable.js":"28"},{"size":547,"mtime":1618038298483,"results":"29","hashOfConfig":"30"},{"size":263,"mtime":1618038298427,"results":"31","hashOfConfig":"30"},{"size":362,"mtime":1618038298834,"results":"32","hashOfConfig":"30"},{"size":1061,"mtime":1618040932996,"results":"33","hashOfConfig":"30"},{"size":1176,"mtime":1618041754690,"results":"34","hashOfConfig":"30"},{"size":812,"mtime":1618040992689,"results":"35","hashOfConfig":"30"},{"size":1801,"mtime":1618041122272,"results":"36","hashOfConfig":"30"},{"size":943,"mtime":1618041070137,"results":"37","hashOfConfig":"30"},{"size":539,"mtime":1612396649000,"results":"38","hashOfConfig":"30"},{"size":2535,"mtime":1612396649000,"results":"39","hashOfConfig":"30"},{"size":5363,"mtime":1621309803011,"results":"40","hashOfConfig":"30"},{"size":7883,"mtime":1621304234441,"results":"41","hashOfConfig":"30"},{"size":3251,"mtime":1618040039617,"results":"42","hashOfConfig":"30"},{"size":6830,"mtime":1618041658005,"results":"43","hashOfConfig":"30"},{"size":610,"mtime":1618041162121,"results":"44","hashOfConfig":"30"},{"size":501,"mtime":1618041167017,"results":"45","hashOfConfig":"30"},{"size":960,"mtime":1618041156905,"results":"46","hashOfConfig":"30"},{"size":398,"mtime":1618041172091,"results":"47","hashOfConfig":"30"},{"size":482,"mtime":1618041150622,"results":"48","hashOfConfig":"30"},{"size":531,"mtime":1612396649000,"results":"49","hashOfConfig":"30"},{"size":681,"mtime":1618041060751,"results":"50","hashOfConfig":"30"},{"size":3523,"mtime":1618041598221,"results":"51","hashOfConfig":"30"},{"size":3568,"mtime":1618040036356,"results":"52","hashOfConfig":"30"},{"size":3923,"mtime":1618040053614,"results":"53","hashOfConfig":"30"},{"size":1491,"mtime":1618041110090,"results":"54","hashOfConfig":"30"},{"size":124,"mtime":1612396649000,"results":"55","hashOfConfig":"30"},{"size":1647,"mtime":1618041081296,"results":"56","hashOfConfig":"30"},{"size":3152,"mtime":1612396649000,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"18bqvbx",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"60"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"128"},"F:\\DEV\\cse470\\transactionApp\\src\\index.js",[],["129","130"],"F:\\DEV\\cse470\\transactionApp\\src\\App.js",[],"F:\\DEV\\cse470\\transactionApp\\src\\reportWebVitals.js",[],"F:\\DEV\\cse470\\transactionApp\\src\\utils\\Common.js",[],"F:\\DEV\\cse470\\transactionApp\\src\\routers\\AppRouter.js",["131","132"],"import React from 'react'\nimport { connect } from 'react-redux'\nimport { Route, Switch, BrowserRouter, Router } from 'react-router-dom'\nimport Login from '../MVCstructure/View/Login'\nimport Profile from '../MVCstructure/View/Profile'\nimport Register from '../MVCstructure/View/Register'\nimport { createBrowserHistory } from 'history'\nimport PrivateRoute from './PrivateRoute'\nimport Navbar from '../MVCstructure/View/Navbar'\nimport Account from '../MVCstructure/View/Account'\n\n// export const history = createBrowserHistory()\n\nconst AppRouter = ({ auth }) => {\n    return (\n        <BrowserRouter>\n            <div>\n                {auth.isAuthenticated && <Navbar />}\n                <Switch>\n                    <Route path='/' component={Login} exact={true} />\n                    <Route path='/register' component={Register} />\n                    <PrivateRoute path='/profile' component={Profile} />\n                    <PrivateRoute path='/account' component={Account} />\n\n                </Switch>\n            </div>\n        </BrowserRouter>\n    )\n}\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n})\n\nexport default connect(mapStateToProps, null)(AppRouter)\n","F:\\DEV\\cse470\\transactionApp\\src\\store\\store.js",[],"F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Controller\\Auth.js",["133","134","135"],"import { SIGN_IN, SIGN_OUT } from '../../utils/Constants'\nimport axios from 'axios'\nimport { setErrors, setSuccessMsg } from './Alert'\nimport { setAuthHeader, removeAuthHeader } from '../../utils/Common'\n// import {history} from '../routers/AppRouter'\nimport { Redirect } from 'react-router-dom'\nimport Profile from '../View/Profile'\nimport { getProfile } from './profileActions'\n\n\nexport const initiateLogin = (email, password) => async dispatch => {\n    try {\n        const result = await axios.post('/signin', {\n            email,\n            password\n        })\n        const user = result.data\n        localStorage.setItem('user_token', user.token);\n        dispatch({\n            type: SIGN_IN,\n            payload: user\n        })\n        dispatch(getProfile(user.email))\n        // history.push('/profile')\n    }\n    catch (error) {\n        console.log(error.response.data)\n        dispatch(setErrors(error.response.data))\n    }\n}\n\nexport const register = (data) => async dispatch => {\n    try {\n        const res = await axios.post('/signup', data)\n        dispatch(setSuccessMsg('User Registered Successfully!!'))\n        return { success: true }\n    }\n    catch (error) {\n        console.log(error)\n        dispatch(setErrors(error.response.data))\n        return { success: false }\n    }\n}\nexport const signIn = (user) => dispatch => {\n    dispatch({\n        type: SIGN_IN,\n        payload: user\n    })\n}\nexport const signOut = () => ({\n    type: SIGN_OUT\n});\n\nexport const logout = () => async dispatch => {\n    try {\n        setAuthHeader();\n        await axios.post(`/logout`);\n        removeAuthHeader();\n        localStorage.removeItem('user_token');\n        return dispatch(signOut());\n    } catch (error) {\n        error.response && dispatch(setErrors(error.response.data));\n    }\n};","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Controller\\profileActions.js",["136"],"import { setErrors } from './Alert'\n// import {history} from '../routers/AppRouter'\nimport { UPDATE_PROFILE, GET_PROFILE } from '../../utils/Constants';\nimport axios from 'axios'\nimport { setAuthHeader, removeAuthHeader } from '../../utils/Common'\n\nexport const updateProfile = (profile) => async dispatch => {\n    try {\n        const res = await axios.post('/profile', profile)\n        dispatch({\n            type: UPDATE_PROFILE,\n            payload: res.data\n        })\n        // history.push('/profile');\n    } catch (error) {\n        error.response &&\n            dispatch(setErrors(error.response.data));\n    }\n}\n\nexport const getProfile = () => async dispatch => {\n    try {\n        setAuthHeader()\n        const res = await axios.get('/profile')\n        dispatch({\n            type: GET_PROFILE,\n            payload: res.data\n        })\n    } catch (error) {\n        error.response && dispatch(setErrors(error.response.data));\n    }\n}","F:\\DEV\\cse470\\transactionApp\\src\\routers\\PrivateRoute.js",[],"F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\View\\Account.js",[],"F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\View\\Login.js",["137","138","139","140"],"import { Box, Button, FilledInput, FormControl, FormHelperText, Grid, IconButton, Input, InputAdornment, InputLabel, makeStyles, Snackbar, Typography } from '@material-ui/core'\nimport React, { useEffect } from 'react'\nimport clsx from 'clsx';\nimport { Email, Visibility, VisibilityOff } from '@material-ui/icons';\nimport { initiateLogin } from '../Controller/Auth'\nimport { connect } from 'react-redux';\nimport { validateFields } from '../../utils/Common';\nimport { Alert } from '@material-ui/lab';\nimport { setErrors } from '../Controller/Alert';\nimport { history } from '../../routers/AppRouter'\nimport { Link, useHistory } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  margin: {\n    margin: theme.spacing(3),\n  },\n  withoutLabel: {\n    marginTop: theme.spacing(3),\n  },\n  textField: {\n    width: '50ch',\n  },\n}));\nconst Login = ({ initiateLogin, error, setErrors, auth }) => {\n  const classes = useStyles();\n  let history = useHistory()\n  const [values, setValues] = React.useState({\n    password: '',\n    showPassword: false,\n    email: '',\n    open: false\n  });\n  const handleLogin = (event) => {\n    event.preventDefault();\n    const { email, password } = values;\n    const fieldsToValidate = [{ email }, { password }];\n\n    const allFieldsEntered = validateFields(fieldsToValidate);\n    if (!allFieldsEntered) {\n      setErrors({ signin_error: 'Please enter all the fields!!' })\n    } else {\n      // login successful\n      initiateLogin(email, password)\n      // history.push('/profile')\n    }\n  };\n  useEffect(() => {\n    if (auth.isAuthenticated) {\n      history.push('/profile')\n    }\n    if (error && error.length !== 0) {\n      setValues({ ...values, open: true })\n    }\n    else {\n      setValues({ ...values, open: false })\n    }\n  }, [error, auth.isAuthenticated, history])\n  const handleChange = (prop) => (event) => {\n    setValues({ ...values, [prop]: event.target.value });\n  };\n\n  const handleClickShowPassword = () => {\n    setValues({ ...values, showPassword: !values.showPassword });\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setValues({ ...values, open: false })\n\n  };\n\n  return (\n    <>\n      <form onSubmit={handleLogin}>\n        {error && values.open && error.map(e => (<Snackbar open={values.open} autoHideDuration={6000} onClose={handleClose}>\n          <Alert onClose={handleClose} severity=\"error\">\n            {e.errors.signin_error}\n          </Alert>\n        </Snackbar>))}\n        <Grid>\n          <Box justifyContent='center' display='flex' className={clsx(classes.margin)}>\n            <Typography variant=\"h5\" >Sign In to your account</Typography>\n          </Box>\n          <Box justifyContent='center' display='flex'>\n            <FormControl className={clsx(classes.margin, classes.textField)} variant=\"filled\">\n              <InputLabel htmlFor=\"filled-adornment-password\">Email</InputLabel>\n              <FilledInput\n                id=\"filled-adornment-password\"\n                type='email'\n                value={values.email}\n                onChange={handleChange('email')}\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"email icon\"\n                      edge=\"end\"\n                    >\n                      <Email />\n                    </IconButton>\n                  </InputAdornment>\n                }\n              />\n            </FormControl>\n          </Box>\n          <Box justifyContent='center' display='flex'>\n            <FormControl className={clsx(classes.margin, classes.textField)} variant=\"filled\">\n              <InputLabel htmlFor=\"filled-adornment-password\">Password</InputLabel>\n              <FilledInput\n                id=\"filled-adornment-password\"\n                type={values.showPassword ? 'text' : 'password'}\n                value={values.password}\n                onChange={handleChange('password')}\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={handleClickShowPassword}\n                      onMouseDown={handleMouseDownPassword}\n                      edge=\"end\"\n                    >\n                      {values.showPassword ? <Visibility /> : <VisibilityOff />}\n                    </IconButton>\n                  </InputAdornment>\n                }\n              />\n            </FormControl>\n          </Box>\n          <Box justifyContent='center' display='flex'>\n            <Button type='submit' variant=\"contained\" className={clsx(classes.margin, classes.textField)} color=\"primary\">SIGN IN</Button>\n          </Box>\n          <Box display='flex' justifyContent='center'>\n            New Customer ? <Link to='/register' >\n              <strong> Register</strong></Link>\n          </Box>\n        </Grid>\n      </form>\n\n    </ >\n\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  error: state.alert.error,\n  auth: state.auth\n})\n\n//export default connect(mapStateToProps, { initiateLogin, setErrors })(Login)\nexport default connect(mapStateToProps, { initiateLogin, setErrors })(Login)\n","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\View\\Profile.js",["141"],"import { Box, Button, Card, CardActions, CardContent, Container, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider, FilledInput, FormControl, IconButton, InputAdornment, InputLabel, makeStyles, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react'\nimport EditIcon from '@material-ui/icons/Edit';\nimport clsx from 'clsx';\nimport { Email } from '@material-ui/icons';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { updateProfile } from '../Controller/profileActions';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        //   minWidth: 10,\n        width: '100%'\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 16,\n    },\n    paper: {\n        margin: 'auto',\n        maxWidth: 500\n    },\n    margin: {\n        margin: theme.spacing(3),\n    },\n    withoutLabel: {\n        marginTop: theme.spacing(3),\n    },\n    textField: {\n        width: '50ch',\n    },\n}));\nconst Profile = ({ profileData, updateProfile }) => {\n    const [values, setValues] = useState(\n        {\n            fname: null,\n            lname: null,\n            email: null\n        }\n    )\n    const handleChange = (prop) => (event) => {\n        setValues({ ...values, [prop]: event.target.value });\n\n    };\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n        setValues({ ...values, fname: profileData && profileData.fname, lname: profileData && profileData.lname, email: profileData && profileData.email })\n    };\n    const onSave = (e) => {\n        e.preventDefault()\n        updateProfile(values)\n        setOpen(false)\n        // handleClose()\n    }\n    useEffect(() => {\n        setValues({ ...values, fname: profileData && profileData.fname, lname: profileData && profileData.lname, email: profileData && profileData.email })\n    }, [profileData])\n\n    return (\n        <div>\n            <Container className={classes.paper}>\n\n                <Box display='flex' m={1} p={1} justifyContent=\"center\">\n                    <Typography variant=\"h4\" component=\"h2\">\n                        Profile\n                </Typography>\n                </Box>\n                <Card className={classes.root}>\n                    {profileData && <CardContent>\n                        <Box display=\"flex\" justifyContent='flex-end'>\n                            <IconButton color='primary' onClick={handleClickOpen}>\n                                <EditIcon />\n                            </IconButton>\n                        </Box>\n                        <Typography className={classes.pos} >\n                            First Name : {profileData.fname}\n                        </Typography>\n                        <Typography className={classes.pos} >\n                            Last Name : {profileData.lname}\n                        </Typography>\n                        <Typography className={classes.pos}>\n                            Email : {profileData.email}\n                        </Typography>\n                    </CardContent>}\n                    <Divider />\n                    <CardActions>\n                        <Button variant=\"outlined\" color=\"primary\" size=\"small\">Change Password</Button>\n                    </CardActions>\n                </Card>\n                <Dialog\n                    open={open}\n                    onClose={handleClose}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                >\n                    <form onSubmit={onSave}>\n                        <DialogTitle id=\"alert-dialog-title\">{\"Edit Your Profile\"}</DialogTitle>\n                        <DialogContent>\n                            <DialogContentText id=\"alert-dialog-description\">\n                                <Box justifyContent='center' display='flex'>\n                                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"filled\">\n                                        <InputLabel htmlFor=\"filled-adornment-password\">First Name</InputLabel>\n                                        <FilledInput\n                                            id=\"filled-adornment-password\"\n                                            type='text'\n                                            value={values.fname}\n                                            onChange={handleChange('fname')}\n                                            required\n                                        />\n                                    </FormControl>\n                                </Box>\n                                <Box justifyContent='center' display='flex'>\n                                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"filled\">\n                                        <InputLabel htmlFor=\"filled-adornment-password\">Last Name</InputLabel>\n                                        <FilledInput\n                                            id=\"filled-adornment-password\"\n                                            type='text'\n                                            value={values.lname}\n                                            onChange={handleChange('lname')}\n                                            required\n                                        />\n                                    </FormControl>\n                                </Box>\n                                <Box justifyContent='center' display='flex'>\n                                    <FormControl className={clsx(classes.margin, classes.textField)} variant=\"filled\">\n                                        <InputLabel htmlFor=\"filled-adornment-password\">Email</InputLabel>\n                                        <FilledInput\n                                            id=\"filled-adornment-password\"\n                                            type='email'\n                                            value={values.email}\n                                            onChange={handleChange('email')}\n                                            required\n                                            endAdornment={\n                                                <InputAdornment position=\"end\">\n                                                    <IconButton\n                                                        aria-label=\"email icon\"\n                                                        edge=\"end\"\n                                                    >\n                                                        <Email />\n                                                    </IconButton>\n                                                </InputAdornment>\n                                            }\n                                        />\n                                    </FormControl>\n                                </Box>\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={handleClose} color=\"primary\">\n                                Cancel\n                    </Button>\n                            <Button type='submit' color=\"primary\" autoFocus>\n                                Save\n                    </Button>\n                        </DialogActions>\n                    </form>\n                </Dialog>\n            </Container>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    profileData: state.profile.profileData\n})\n\nexport default withRouter(connect(mapStateToProps, { updateProfile })(Profile))\n","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\View\\Navbar.js",["142"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport { CssBaseline } from '@material-ui/core';\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\nimport { connect } from 'react-redux';\nimport { logout } from '../Controller/Auth'\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst Navbar = ({ logout }) => {\n  const classes = useStyles();\n  const [auth, setAuth] = React.useState(true);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleChange = (event) => {\n    setAuth(event.target.checked);\n  };\n\n  const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const handleCloseLogOut = () => {\n    setAnchorEl(null);\n    logout()\n  }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <AccountBalanceWalletIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Transaction App\n          </Typography>\n          {auth && (\n            <div>\n              <IconButton\n                aria-label=\"account of current user\"\n                aria-controls=\"menu-appbar\"\n                aria-haspopup=\"true\"\n                onClick={handleMenu}\n                color=\"inherit\"\n              >\n                <AccountCircle />\n              </IconButton>\n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right',\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right',\n                }}\n                open={open}\n                onClose={handleClose}\n              >\n                <Link to='/profile' style={{ textDecoration: 'none', display: 'block', color: '#000' }}>\n                  <MenuItem onClick={handleClose}>Profile</MenuItem>\n                </Link>\n                <Link to='/account' style={{ textDecoration: 'none', display: 'block', color: '#000' }}>\n                  <MenuItem onClick={handleClose}>Account</MenuItem>\n                </Link>\n                <MenuItem onClick={handleCloseLogOut}>LogOut</MenuItem>\n              </Menu>\n            </div>\n          )}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n})\nexport default connect(mapStateToProps, { logout })(Navbar)","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\View\\Register.js",["143","144","145"],"import { Box, Button, FilledInput, FormControl, FormHelperText, Grid, IconButton, Input, InputAdornment, InputLabel, makeStyles, Snackbar, Typography } from '@material-ui/core'\nimport React, { useEffect } from 'react'\nimport clsx from 'clsx';\nimport { Email, Visibility, VisibilityOff } from '@material-ui/icons';\nimport { connect } from 'react-redux';\nimport { register } from '../Controller/Auth'\nimport { validateFields } from '../../utils/Common'\nimport { setErrors } from '../Controller/Alert'\nimport { Alert } from '@material-ui/lab';\nimport { Link, useHistory } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  margin: {\n    margin: theme.spacing(3),\n  },\n  withoutLabel: {\n    marginTop: theme.spacing(3),\n  },\n  textField: {\n    width: '50ch',\n  },\n}));\nconst Register = ({ register, error, setErrors, success }) => {\n  const classes = useStyles();\n  const history = useHistory()\n  const [values, setValues] = React.useState({\n    password: '',\n    showPassword: false,\n    email: '',\n    fname: '',\n    lname: '',\n    isSubmitted: false,\n    open: false,\n  });\n  const registerUser = async (event) => {\n    event.preventDefault();\n    const { fname, lname, email, password } = values;\n\n    const fieldsToValidate = [\n      { fname },\n      { lname },\n      { email },\n      { password }\n    ];\n\n    const allFieldsEntered = validateFields(fieldsToValidate);\n    if (!allFieldsEntered) {\n      // setValues({...values, errorMsg: {signup_error: 'Please enter all the fields!!'}})\n      setErrors({ signup_error: 'Please enter all the fields!!' })\n    } else {\n      const succ = await register({ fname, lname, email, password })\n      if (succ) {\n        history.push('/')\n      }\n      // if(succ.success){\n      //     console.log('success..')\n      //     setValues({...values, isSubmitted:true})\n\n      //     setValues({...values, successMsg:'User registered successfully!!'})\n      // }\n    }\n  };\n  const handleChange = (prop) => (event) => {\n    setValues({ ...values, [prop]: event.target.value });\n  };\n\n  const handleClickShowPassword = () => {\n    setValues({ ...values, showPassword: !values.showPassword });\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setValues({ ...values, open: false })\n    setValues({ ...values, isSubmitted: false })\n  };\n\n  useEffect(() => {\n    if (error && error.length !== 0) {\n      setValues({ ...values, open: true })\n    }\n    else if (success && success.length !== 0) {\n      setValues({ ...values, isSubmitted: true })\n    }\n    else {\n      setValues({ ...values, open: false })\n      setValues({ ...values, isSubmitted: false })\n    }\n  }, [error, success])\n\n  return (\n    <form onSubmit={registerUser}>\n      {error && values.open && error.map(e => (<Snackbar open={values.open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\">\n          {e.errors.signup_error}\n        </Alert>\n      </Snackbar>))}\n      { success && values.isSubmitted && success.map(s => <Snackbar open={values.isSubmitted} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"success\">\n          {s.successMsg}\n        </Alert>\n      </Snackbar>)}\n      <Grid>\n        <Box justifyContent='center' display='flex' className={clsx(classes.margin)}>\n          <Typography variant=\"h5\" >Sign Up</Typography>\n        </Box>\n        <Box justifyContent='center' display='flex'>\n          <FormControl className={clsx(classes.margin, classes.textField)} variant=\"filled\">\n            <InputLabel htmlFor=\"filled-adornment-password\">First Name</InputLabel>\n            <FilledInput\n              id=\"filled-adornment-password\"\n              type='text'\n              value={values.fname}\n              onChange={handleChange('fname')}\n            />\n          </FormControl>\n        </Box>\n        <Box justifyContent='center' display='flex'>\n          <FormControl className={clsx(classes.margin, classes.textField)} variant=\"filled\">\n            <InputLabel htmlFor=\"filled-adornment-password\">Last Name</InputLabel>\n            <FilledInput\n              id=\"filled-adornment-password\"\n              type='text'\n              value={values.lname}\n              onChange={handleChange('lname')}\n            />\n          </FormControl>\n        </Box>\n        <Box justifyContent='center' display='flex'>\n          <FormControl className={clsx(classes.margin, classes.textField)} variant=\"filled\">\n            <InputLabel htmlFor=\"filled-adornment-password\">Email</InputLabel>\n            <FilledInput\n              id=\"filled-adornment-password\"\n              type='email'\n              value={values.email}\n              onChange={handleChange('email')}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    aria-label=\"email icon\"\n                    edge=\"end\"\n                  >\n                    <Email />\n                  </IconButton>\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n        </Box>\n        <Box justifyContent='center' display='flex'>\n          <FormControl className={clsx(classes.margin, classes.textField)} variant=\"filled\">\n            <InputLabel htmlFor=\"filled-adornment-password\">Password</InputLabel>\n            <FilledInput\n              id=\"filled-adornment-password\"\n              type={values.showPassword ? 'text' : 'password'}\n              value={values.password}\n              onChange={handleChange('password')}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    aria-label=\"toggle password visibility\"\n                    onClick={handleClickShowPassword}\n                    onMouseDown={handleMouseDownPassword}\n                    edge=\"end\"\n                  >\n                    {values.showPassword ? <Visibility /> : <VisibilityOff />}\n                  </IconButton>\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n        </Box>\n        <Box justifyContent='center' display='flex'>\n          <Button type='submit' variant=\"contained\" className={clsx(classes.margin, classes.textField)} color=\"primary\">SIGN UP</Button>\n        </Box>\n        <Box display='flex' justifyContent='center'>\n          Already Registered ? <Link to='/' >\n            <strong> Login</strong></Link>\n        </Box>\n      </Grid>\n    </form>\n  )\n}\nconst mapStateToProps = (state) => ({\n  error: state.alert.error,\n  success: state.alert.success\n})\n\nexport default connect(mapStateToProps, { register, setErrors })(Register)\n","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Model\\authReducer.js",[],"F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Model\\profileReducer.js",["146"],"import React from 'react'\nimport { UPDATE_PROFILE, GET_PROFILE, SIGN_OUT } from '../../utils/Constants'\n\nconst initialState = {\n    profileData: null\n}\n\nexport const profileReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case UPDATE_PROFILE:\n        case GET_PROFILE:\n            return {\n                ...state,\n                profileData: action.payload\n            }\n        case SIGN_OUT:\n            return {}\n        default:\n            return state;\n    }\n}","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Model\\alertReducer.js",[],"F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Model\\transactionReducer.js",[],"F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Model\\accountReducer.js",[],"F:\\DEV\\cse470\\transactionApp\\src\\utils\\Constants.js",[],"F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Controller\\Alert.js",[],"F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\View\\AccountForm.js",["147"],"import React, { useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { Container, Divider, FormControl, InputAdornment, InputLabel, OutlinedInput } from '@material-ui/core';\nimport AddAccountForm from './AddAccountForm';\nimport { connect } from 'react-redux';\nimport { getAccountDetails } from '../Controller/accountAction';\nimport { maskNumber } from '../../utils/mask'\nimport { depositAmount, withdrawAmount } from '../Controller/transactionAction'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 30,\n  },\n  pos: {\n    marginBottom: 25,\n    marginTop: 10\n  },\n  margin: {\n    marginTop: theme.spacing(1),\n  },\n  button: {\n    marginLeft: 10\n  }\n}));\n\n\nconst AccountForm = ({ type, account, userData, getAccountDetails, depositAmount, withdrawAmount }) => {\n  const classes = useStyles();\n  const { email } = userData\n  const [values, setValues] = React.useState({\n    amount: ''\n  })\n  const account_no = account.account_no ? maskNumber(account.account_no) : ''\n  const handleChange = (prop) => (event) => {\n    setValues({ ...values, [prop]: event.target.value });\n  };\n  useEffect(() => {\n    if (email)\n      getAccountDetails()\n  }, [email])\n  const onSubmit = (e) => {\n    e.preventDefault()\n    type === 'Deposit' ? depositAmount(account._id, Number(values.amount)) : withdrawAmount(account._id, Number(values.amount))\n  }\n  return (\n    <Container>\n      { account_no ?\n        <Card className={classes.root} variant=\"outlined\">\n          <form onSubmit={onSubmit}>\n            <CardContent>\n              <Typography className={classes.title} gutterBottom>\n                {type}\n              </Typography>\n              <Divider />\n              <Typography className={classes.pos} color=\"textSecondary\">\n                Account Number: {account_no}\n              </Typography>\n              <Typography className={classes.pos} color=\"textSecondary\">\n                Available Balance: {account.total_balance}\n              </Typography>\n              <FormControl className={classes.margin} variant=\"outlined\">\n                <InputLabel htmlFor=\"outlined-adornment-amount\">Amount</InputLabel>\n                <OutlinedInput\n                  id=\"outlined-adornment-amount\"\n                  value={values.amount}\n                  onChange={handleChange('amount')}\n                  startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n                  labelWidth={60}\n                  placeholder={`Enter amount to ${type}`}\n                  style={{ width: '40vw' }}\n                  required\n                />\n              </FormControl>\n            </CardContent>\n            <CardActions>\n              <Button type='submit' size=\"small\" className={classes.button} variant='outlined' color='primary' >Submit</Button>\n            </CardActions>\n          </form>\n        </Card> :\n        <AddAccountForm />}\n    </Container>\n  )\n}\nconst mapStateToProps = state => ({\n  userData: state.auth.userData,\n  account: state.account\n\n})\n\nexport default connect(mapStateToProps, { getAccountDetails, depositAmount, withdrawAmount })(AccountForm)\n","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\View\\Summary.js",["148","149"],"import React, { useEffect, useState } from 'react'\nimport DataTable from './DataTable'\nimport 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardTimePicker,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { Box, Button, makeStyles } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { getTransactions } from '../Controller/transactionAction'\n\nconst useStyles = makeStyles({\n    margin: {\n        marginBottom: 10\n    }\n})\nfunction disablePrevDates(startDate) {\n    const startSeconds = Date.parse(startDate);\n    return (date) => {\n        return Date.parse(date) < startSeconds;\n    }\n}\nconst Summary = ({ account, getTransactions, transaction }) => {\n    const [startDate, setStartDate] = useState(null);\n    const [endDate, setEndDate] = useState(null)\n    const handleStartDateChange = (date) => {\n        setStartDate(date);\n    };\n    const handleEndDateChange = (date) => {\n        setEndDate(date);\n    };\n    const classes = useStyles()\n\n    const onButtonClick = () => {\n        getTransactions(account && account._id, startDate, endDate)\n    }\n\n    useEffect(() => {\n        getTransactions(account && account._id)\n\n    }, [])\n\n    return (\n        <div>\n            <Grid className={classes.margin} container justify='center' alignItems='center' spacing={2}>\n                <Grid item xs={3}>\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                        <KeyboardDatePicker\n                            autoOk={true}\n                            variant=\"inline\"\n                            format=\"MM/dd/yyyy\"\n                            margin=\"normal\"\n                            id=\"date-picker-inline\"\n                            label=\"Start Date\"\n                            value={startDate}\n                            maxDate={new Date()}\n                            onChange={handleStartDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                    </MuiPickersUtilsProvider>\n                </Grid>\n                <Grid item xs={3}>\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                        <KeyboardDatePicker\n                            autoOk={true}\n                            variant=\"inline\"\n                            format=\"MM/dd/yyyy\"\n                            margin=\"normal\"\n                            id=\"date-picker-inline\"\n                            label=\"End Date\"\n                            value={endDate}\n                            onChange={handleEndDateChange}\n                            shouldDisableDate={disablePrevDates(startDate)}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                    </MuiPickersUtilsProvider>\n                </Grid>\n                <Grid item xs={4}>\n                    <Box mt={3}>\n                        <Button onClick={onButtonClick} variant='outlined' color='primary' >Filter</Button>\n                    </Box>\n                </Grid>\n            </Grid>\n            <DataTable transaction={transaction} />\n        </div>\n    )\n}\nconst mapStateToProps = (state) => ({\n    account: state.account,\n    transaction: state.transaction\n})\n\n\nexport default connect(mapStateToProps, { getTransactions })(Summary)\n","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\View\\AddAccountForm.js",["150"],"import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { Container, Divider, FormControl, InputAdornment, InputLabel, OutlinedInput } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { addAccountDetails } from '../Controller/accountAction';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: 275,\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 30,\n    },\n    pos: {\n        marginBottom: 25,\n        marginTop: 10\n    },\n    margin: {\n        marginTop: theme.spacing(1),\n    },\n    button: {\n        marginLeft: 10\n    }\n}));\n\n\nconst AddAccountForm = ({ addAccountDetails }) => {\n    const classes = useStyles();\n    const [values, setValues] = React.useState({\n        accno: '',\n        bankName: '',\n        ifsc: ''\n    })\n    const onAdd = async (e) => {\n        e.preventDefault()\n        await addAccountDetails(values.accno, values.bankName, values.ifsc)\n    }\n    const handleChange = (prop) => (event) => {\n        setValues({ ...values, [prop]: event.target.value });\n    };\n    return (\n        <Container>\n            <form onSubmit={onAdd}>\n                <Card className={classes.root} variant=\"outlined\">\n                    <CardContent>\n                        <Typography className={classes.title} gutterBottom>\n                            Add Account\n                    </Typography>\n                        <Divider />\n                        <FormControl className={classes.margin} variant=\"outlined\">\n                            <InputLabel htmlFor=\"outlined-adornment-amount\">Account No</InputLabel>\n                            <OutlinedInput\n                                id=\"outlined-adornment-amount\"\n                                value={values.accno}\n                                onChange={handleChange('accno')}\n                                labelWidth={100}\n                                style={{ width: '40vw' }}\n                            />\n                        </FormControl>\n                        <FormControl className={classes.margin} variant=\"outlined\">\n                            <InputLabel htmlFor=\"outlined-adornment-amount\">Bank Name</InputLabel>\n                            <OutlinedInput\n                                id=\"outlined-adornment-amount\"\n                                value={values.bankName}\n                                onChange={handleChange('bankName')}\n                                labelWidth={90}\n                                style={{ width: '40vw' }}\n                            />\n                        </FormControl>\n                        <FormControl className={classes.margin} variant=\"outlined\">\n                            <InputLabel htmlFor=\"outlined-adornment-amount\">IFSC Code</InputLabel>\n                            <OutlinedInput\n                                id=\"outlined-adornment-amount\"\n                                value={values.ifsc}\n                                onChange={handleChange('ifsc')}\n                                labelWidth={90}\n                                style={{ width: '40vw' }}\n                            />\n                        </FormControl>\n                    </CardContent>\n                    <CardActions>\n                        <Button type='submit' size=\"small\" className={classes.button} variant='outlined' color='primary' >Submit</Button>\n                    </CardActions>\n                </Card>\n            </form>\n        </Container>\n    )\n}\n\nexport default connect(null, { addAccountDetails })(AddAccountForm)\n","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Controller\\accountAction.js",[],"F:\\DEV\\cse470\\transactionApp\\src\\utils\\mask.js",[],"F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\Controller\\transactionAction.js",["151","152"],"import { setErrors } from './Alert'\nimport { ADD_TRANSACTION, GET_TRANSACTION } from '../../utils/Constants'\nimport { updateAccount } from './accountAction'\nimport axios from 'axios'\n\nexport const depositAmount = (account_id, amount) => async (dispatch) => {\n    try {\n        const { data: { msg, accountDetails, transactionObj } } = await axios.post(`/deposit/${account_id}`, { deposit_amount: amount })\n        dispatch({\n            type: ADD_TRANSACTION,\n            payload: transactionObj\n        })\n        dispatch(updateAccount(accountDetails));\n    } catch (error) {\n        error.response && dispatch(setErrors(error.response.data));\n    }\n}\nexport const withdrawAmount = (account_id, amount) => async (dispatch) => {\n    try {\n        const { data: { msg, accountDetails, transactionObj } } = await axios.post(`/withdraw/${account_id}`, { withdraw_amount: amount })\n        dispatch({\n            type: ADD_TRANSACTION,\n            payload: transactionObj\n        })\n        dispatch(updateAccount(accountDetails));\n    } catch (error) {\n        error.response && dispatch(setErrors(error.response.data));\n    }\n}\n\nexport const getTransactions = (account_id, start_date, end_date) => async (dispatch) => {\n    try {\n        const transactions = await axios.get(`/transactions/${account_id}`, {\n            params: {\n                start_date,\n                end_date\n            }\n        })\n        console.log(transactions.data)\n        dispatch({\n            type: GET_TRANSACTION,\n            payload: transactions.data\n        })\n    } catch (error) {\n        error.response && dispatch(setErrors(error.response.data));\n    }\n}","F:\\DEV\\cse470\\transactionApp\\src\\MVCstructure\\View\\DataTable.js",["153","154"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst columns = [\n  { id: 'transaction_date', label: 'Date', minWidth: 170,\n  format: (value)=> new Date(value).toDateString() },\n  { id: 'deposit_amount', label: 'Deposits', minWidth: 100,\n  format: (value) => value.toLocaleString('en-US') },\n  {\n    id: 'withdraw_amount',\n    label: 'WithDrawals',\n    minWidth: 170,\n    align: 'right',\n    format: (value) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'balance',\n    label: 'Balance',\n    minWidth: 170,\n    align: 'right',\n    format: (value) => value.toLocaleString('en-US'),\n  }\n];\n\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    maxHeight: 440,\n  },\n});\n\nexport default function DataTable({transaction}) {\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const rows = transaction \n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                  {columns.map((column) => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'number' || column.label === 'Date' ? column.format(value) : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}\n",["155","156"],{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","severity":1,"message":"162","line":3,"column":40,"nodeType":"163","messageId":"164","endLine":3,"endColumn":46},{"ruleId":"161","severity":1,"message":"165","line":7,"column":10,"nodeType":"163","messageId":"164","endLine":7,"endColumn":30},{"ruleId":"161","severity":1,"message":"166","line":6,"column":10,"nodeType":"163","messageId":"164","endLine":6,"endColumn":18},{"ruleId":"161","severity":1,"message":"167","line":7,"column":8,"nodeType":"163","messageId":"164","endLine":7,"endColumn":15},{"ruleId":"161","severity":1,"message":"168","line":34,"column":15,"nodeType":"163","messageId":"164","endLine":34,"endColumn":18},{"ruleId":"161","severity":1,"message":"169","line":5,"column":25,"nodeType":"163","messageId":"164","endLine":5,"endColumn":41},{"ruleId":"161","severity":1,"message":"170","line":1,"column":49,"nodeType":"163","messageId":"164","endLine":1,"endColumn":63},{"ruleId":"161","severity":1,"message":"171","line":1,"column":83,"nodeType":"163","messageId":"164","endLine":1,"endColumn":88},{"ruleId":"161","severity":1,"message":"172","line":10,"column":10,"nodeType":"163","messageId":"164","endLine":10,"endColumn":17},{"ruleId":"173","severity":1,"message":"174","line":62,"column":6,"nodeType":"175","endLine":62,"endColumn":44,"suggestions":"176"},{"ruleId":"173","severity":1,"message":"174","line":71,"column":8,"nodeType":"175","endLine":71,"endColumn":21,"suggestions":"177"},{"ruleId":"161","severity":1,"message":"178","line":34,"column":9,"nodeType":"163","messageId":"164","endLine":34,"endColumn":21},{"ruleId":"161","severity":1,"message":"170","line":1,"column":49,"nodeType":"163","messageId":"164","endLine":1,"endColumn":63},{"ruleId":"161","severity":1,"message":"171","line":1,"column":83,"nodeType":"163","messageId":"164","endLine":1,"endColumn":88},{"ruleId":"173","severity":1,"message":"174","line":99,"column":6,"nodeType":"175","endLine":99,"endColumn":22,"suggestions":"179"},{"ruleId":"161","severity":1,"message":"180","line":1,"column":8,"nodeType":"163","messageId":"164","endLine":1,"endColumn":13},{"ruleId":"173","severity":1,"message":"181","line":53,"column":6,"nodeType":"175","endLine":53,"endColumn":13,"suggestions":"182"},{"ruleId":"161","severity":1,"message":"183","line":8,"column":5,"nodeType":"163","messageId":"164","endLine":8,"endColumn":23},{"ruleId":"173","severity":1,"message":"184","line":44,"column":8,"nodeType":"175","endLine":44,"endColumn":10,"suggestions":"185"},{"ruleId":"161","severity":1,"message":"186","line":8,"column":43,"nodeType":"163","messageId":"164","endLine":8,"endColumn":57},{"ruleId":"161","severity":1,"message":"187","line":8,"column":25,"nodeType":"163","messageId":"164","endLine":8,"endColumn":28},{"ruleId":"161","severity":1,"message":"187","line":20,"column":25,"nodeType":"163","messageId":"164","endLine":20,"endColumn":28},{"ruleId":"188","severity":1,"message":"189","line":84,"column":40,"nodeType":"190","messageId":"191","endLine":84,"endColumn":42},{"ruleId":"188","severity":1,"message":"189","line":84,"column":69,"nodeType":"190","messageId":"191","endLine":84,"endColumn":71},{"ruleId":"157","replacedBy":"192"},{"ruleId":"159","replacedBy":"193"},"no-native-reassign",["194"],"no-negated-in-lhs",["195"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'createBrowserHistory' is defined but never used.","'Redirect' is defined but never used.","'Profile' is defined but never used.","'res' is assigned a value but never used.","'removeAuthHeader' is defined but never used.","'FormHelperText' is defined but never used.","'Input' is defined but never used.","'history' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'values'. Either include it or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.","ArrayExpression",["196"],["197"],"'handleChange' is assigned a value but never used.",["198"],"'React' is defined but never used.","React Hook useEffect has a missing dependency: 'getAccountDetails'. Either include it or remove the dependency array. If 'getAccountDetails' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["199"],"'KeyboardTimePicker' is defined but never used.","React Hook useEffect has missing dependencies: 'account' and 'getTransactions'. Either include them or remove the dependency array. If 'getTransactions' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["200"],"'InputAdornment' is defined but never used.","'msg' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator",["194"],["195"],"no-global-assign","no-unsafe-negation",{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},"Update the dependencies array to be: [error, auth.isAuthenticated, history, values]",{"range":"211","text":"212"},"Update the dependencies array to be: [profileData, values]",{"range":"213","text":"214"},"Update the dependencies array to be: [error, success, values]",{"range":"215","text":"216"},"Update the dependencies array to be: [email, getAccountDetails]",{"range":"217","text":"218"},"Update the dependencies array to be: [account, getTransactions]",{"range":"219","text":"220"},[1834,1872],"[error, auth.isAuthenticated, history, values]",[2133,2146],"[profileData, values]",[2821,2837],"[error, success, values]",[1583,1590],"[email, getAccountDetails]",[1270,1272],"[account, getTransactions]"]